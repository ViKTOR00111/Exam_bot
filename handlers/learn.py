import json
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from keyboards.builders import (
    get_years_keyboard,
    get_books_keyboard,
    get_variants_keyboard,
    get_final_keyboard
)
from states.form import Form
from settings import Messages
from pathlib import Path
from utils.book_mapings import find_book

router = Router()


def load_answer(year, author):
    file_path = Path(__file__).parents[1].joinpath(f"data_answers/{year}_{author}.json")

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
        return {f"{item['variant']}_{item['exercise']}": item['answer'] for item in data['answers']}
    except FileNotFoundError:
        raise ValueError(f"–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è —É—á–µ–±–Ω–∏–∫–∞ '{year, author}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def send_task(message: Message, state: FSMContext):
    data = await state.get_data()
    current_task = data["test_data"]["current_task"]
    selected_variant = data["selected_variant"]
    book_name = find_book(data["selected_book"])
    year = data["selected_year"]

    task_image_path = Path(__file__).parents[1].joinpath("task_images", f"{year}_{book_name}",
                                                         f"{selected_variant}_{current_task}.png")

    try:
        photo = FSInputFile(task_image_path)
        await message.answer_photo(
            photo=photo,
            caption=f"üìù –ó–∞–¥–∞–Ω–∏–µ {current_task}:"
        )
    except FileNotFoundError:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏e. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await message.answer(
        Messages.WELCOME_MESSAGE,
        reply_markup=get_years_keyboard()
    )
    await state.set_state(Form.choosing_year)


@router.message(Form.choosing_year)
async def choose_year_handler(message: Message, state: FSMContext) -> None:
    if message.text.isdigit() and int(message.text) in Messages.YEARS:
        await state.update_data(selected_year=message.text)
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω –≥–æ–¥: {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–Ω–∏–∫:",
            reply_markup=get_books_keyboard()
        )
        await state.set_state(Form.choosing_book)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞")


@router.message(Form.choosing_book)
async def choose_book_handler(message: Message, state: FSMContext) -> None:
    if message.text in Messages.BOOKS:
        await state.update_data(selected_book=message.text)
        data = await state.get_data()
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω–æ: {data['selected_year']} –≥–æ–¥, {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_variants_keyboard(max_variant=int(message.text.split()[0]))
        )
        await state.set_state(Form.choosing_variant)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–Ω–∏–∫–∞")


@router.message(Form.choosing_variant)
async def choose_variant_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    max_variant = int(data["selected_book"].split()[0])

    if message.text.isdigit():
        variant = int(message.text)
        if 1 <= variant <= max_variant:
            await state.update_data(selected_variant=variant)

            year = data["selected_year"]
            author = find_book(data["selected_book"])
            answers = load_answer(year, author)
            await state.update_data(answers=answers)

            user_data = {
                "current_task": 1,
                "results": []
            }
            await state.update_data(test_data=user_data)
            await message.answer(
                f"‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                f"–ì–æ–¥: {data['selected_year']}\n"
                f"–ó–∞–¥–∞—á–Ω–∏–∫: {data['selected_book']}\n"
                f"–í–∞—Ä–∏–∞–Ω—Ç: {variant}\n"
                "–ù–∞–∂–º–∏—Ç–µ '–†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—è–º.",
                reply_markup=get_final_keyboard()
            )
        else:
            await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_variant}")
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ü–∏—Ñ—Ä–æ–π")


@router.callback_query(lambda c: c.data == "reset_all")
async def reset_all_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üîÑ –í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
        reply_markup=get_years_keyboard()
    )
    await state.set_state(Form.choosing_year)
    await callback.answer()


@router.message(Form.solving_tasks)
async def handle_task_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    test_data = data["test_data"]
    current_task = test_data["current_task"]
    selected_variant = data["selected_variant"]
    answers = data["answers"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return

    user_answer = message.text.strip()  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answer_key = f"{selected_variant}_{current_task}"  # –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if answer_key not in answers:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    correct_answer = str(answers[answer_key])  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É)
    is_correct = user_answer == correct_answer

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = {
        "task": current_task,
        "user_answer": user_answer,
        "is_correct": is_correct
    }
    test_data["results"].append(result)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
    test_data["current_task"] += 1
    await state.update_data(test_data=test_data)

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_correct:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    if test_data["current_task"] > 16:
        await finish_test(message, state)
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await send_task(message, state)


async def finish_test(message: Message, state: FSMContext):
    data = await state.get_data()
    results = data["test_data"]["results"]

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tasks = len(results)
    correct_tasks = sum(1 for result in results if result["is_correct"])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = (
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_tasks}/{total_tasks}\n\n"
        f"üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    )

    for result in results:
        status = "‚úÖ" if result["is_correct"] else "‚ùå"
        result_message += (
            f"{status} –ó–∞–¥–∞–Ω–∏–µ {result['task']}: "
            f"–í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer']}\n"
        )

    await message.answer(result_message)
    await state.clear()


@router.callback_query(lambda c: c.data == "solve_tasks")
async def solve_tasks_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.solving_tasks)
    await send_task(callback.message, state)
    await callback.answer()